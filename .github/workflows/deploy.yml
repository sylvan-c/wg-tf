name: Deploy VPN

on:
  workflow_dispatch:
    inputs:
      region:
        description: 'Region to deploy VPN'
        required: true
        default: nyc3
      droplet_name:
        description: 'Name for the VPN droplet'
        required: true
        default: wg-vpn

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve \
            -var="do_token=${{ secrets.DIGITALOCEAN_TOKEN }}" \
            -var="ssh_fingerprint=b2:5f:b6:f8:09:e2:91:fd:39:2c:9e:e2:c8:65:a6:9d" \
            -var="region=${{ github.event.inputs.region }}" \
            -var="droplet_name=${{ github.event.inputs.droplet_name }}" \
            -input=false
      
      - name: Get VPN droplet IP
        run: |
          DROPLET_NAME="${{ github.event.inputs.droplet_name }}"

          # Find droplet ID
          DROPLET_ID=$(curl -s -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
            "https://api.digitalocean.com/v2/droplets" \
            | jq -r --arg name "$DROPLET_NAME" '.droplets[] | select(.name==$name) | .id')

          if [ -z "$DROPLET_ID" ]; then
            echo "Droplet not found."
            exit 1
          fi

          # Get public IP
          DROPLET_IP=$(curl -s -X GET \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
            "https://api.digitalocean.com/v2/droplets/$DROPLET_ID" \
            | jq -r '.droplet.networks.v4[] | select(.type=="public") | .ip_address')

          echo "VPN Public IP: $DROPLET_IP"
          echo "droplet_ip=$DROPLET_IP" >> $GITHUB_OUTPUT
